// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozoncp/ocp-skill-api/internal/repo (interfaces: Repo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ozoncp/ocp-skill-api/internal/models"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// AddSkill mocks base method.
func (m *MockRepo) AddSkill(arg0 context.Context, arg1 models.Skill) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSkill", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSkill indicates an expected call of AddSkill.
func (mr *MockRepoMockRecorder) AddSkill(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSkill", reflect.TypeOf((*MockRepo)(nil).AddSkill), arg0, arg1)
}

// AddSkills mocks base method.
func (m *MockRepo) AddSkills(arg0 context.Context, arg1 []models.Skill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSkills", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSkills indicates an expected call of AddSkills.
func (mr *MockRepoMockRecorder) AddSkills(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSkills", reflect.TypeOf((*MockRepo)(nil).AddSkills), arg0, arg1)
}

// DescribeSkill mocks base method.
func (m *MockRepo) DescribeSkill(arg0 context.Context, arg1 uint64) (*models.Skill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSkill", arg0, arg1)
	ret0, _ := ret[0].(*models.Skill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSkill indicates an expected call of DescribeSkill.
func (mr *MockRepoMockRecorder) DescribeSkill(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSkill", reflect.TypeOf((*MockRepo)(nil).DescribeSkill), arg0, arg1)
}

// ListSkills mocks base method.
func (m *MockRepo) ListSkills(arg0 context.Context, arg1, arg2 uint64) ([]models.Skill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSkills", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Skill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSkills indicates an expected call of ListSkills.
func (mr *MockRepoMockRecorder) ListSkills(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSkills", reflect.TypeOf((*MockRepo)(nil).ListSkills), arg0, arg1, arg2)
}

// RemoveSkill mocks base method.
func (m *MockRepo) RemoveSkill(arg0 context.Context, arg1 uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSkill", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveSkill indicates an expected call of RemoveSkill.
func (mr *MockRepoMockRecorder) RemoveSkill(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSkill", reflect.TypeOf((*MockRepo)(nil).RemoveSkill), arg0, arg1)
}

// UpdateSkill mocks base method.
func (m *MockRepo) UpdateSkill(arg0 context.Context, arg1 models.Skill) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSkill", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSkill indicates an expected call of UpdateSkill.
func (mr *MockRepoMockRecorder) UpdateSkill(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSkill", reflect.TypeOf((*MockRepo)(nil).UpdateSkill), arg0, arg1)
}
