// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_skill_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpSkillApiClient is the client API for OcpSkillApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpSkillApiClient interface {
	//Get skills for user
	ListSkillsV1(ctx context.Context, in *ListSkillsRequestV1, opts ...grpc.CallOption) (*ListSkillsResponseV1, error)
	//Create skill for user
	CreateSkillV1(ctx context.Context, in *CreateSkillRequestV1, opts ...grpc.CallOption) (*CreateSkillResponseV1, error)
	//Get skill by id
	DescribeSkillV1(ctx context.Context, in *DescribeSkillRequestV1, opts ...grpc.CallOption) (*DescribeSkillResponseV1, error)
	//Remove skill by id
	RemoveSkillV1(ctx context.Context, in *RemoveSkillRequestV1, opts ...grpc.CallOption) (*RemoveSkillResponseV1, error)
	//Update skill
	UpdateSkillV1(ctx context.Context, in *UpdateSkillRequestV1, opts ...grpc.CallOption) (*UpdateSkillResponseV1, error)
	//Add multi skills
	MultiCreateSkillsV1(ctx context.Context, in *MultiCreateSkillRequestV1, opts ...grpc.CallOption) (*MultiCreateSkillResponseV1, error)
}

type ocpSkillApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpSkillApiClient(cc grpc.ClientConnInterface) OcpSkillApiClient {
	return &ocpSkillApiClient{cc}
}

func (c *ocpSkillApiClient) ListSkillsV1(ctx context.Context, in *ListSkillsRequestV1, opts ...grpc.CallOption) (*ListSkillsResponseV1, error) {
	out := new(ListSkillsResponseV1)
	err := c.cc.Invoke(ctx, "/ocp.skill.api.OcpSkillApi/ListSkillsV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpSkillApiClient) CreateSkillV1(ctx context.Context, in *CreateSkillRequestV1, opts ...grpc.CallOption) (*CreateSkillResponseV1, error) {
	out := new(CreateSkillResponseV1)
	err := c.cc.Invoke(ctx, "/ocp.skill.api.OcpSkillApi/CreateSkillV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpSkillApiClient) DescribeSkillV1(ctx context.Context, in *DescribeSkillRequestV1, opts ...grpc.CallOption) (*DescribeSkillResponseV1, error) {
	out := new(DescribeSkillResponseV1)
	err := c.cc.Invoke(ctx, "/ocp.skill.api.OcpSkillApi/DescribeSkillV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpSkillApiClient) RemoveSkillV1(ctx context.Context, in *RemoveSkillRequestV1, opts ...grpc.CallOption) (*RemoveSkillResponseV1, error) {
	out := new(RemoveSkillResponseV1)
	err := c.cc.Invoke(ctx, "/ocp.skill.api.OcpSkillApi/RemoveSkillV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpSkillApiClient) UpdateSkillV1(ctx context.Context, in *UpdateSkillRequestV1, opts ...grpc.CallOption) (*UpdateSkillResponseV1, error) {
	out := new(UpdateSkillResponseV1)
	err := c.cc.Invoke(ctx, "/ocp.skill.api.OcpSkillApi/UpdateSkillV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpSkillApiClient) MultiCreateSkillsV1(ctx context.Context, in *MultiCreateSkillRequestV1, opts ...grpc.CallOption) (*MultiCreateSkillResponseV1, error) {
	out := new(MultiCreateSkillResponseV1)
	err := c.cc.Invoke(ctx, "/ocp.skill.api.OcpSkillApi/MultiCreateSkillsV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpSkillApiServer is the server API for OcpSkillApi service.
// All implementations must embed UnimplementedOcpSkillApiServer
// for forward compatibility
type OcpSkillApiServer interface {
	//Get skills for user
	ListSkillsV1(context.Context, *ListSkillsRequestV1) (*ListSkillsResponseV1, error)
	//Create skill for user
	CreateSkillV1(context.Context, *CreateSkillRequestV1) (*CreateSkillResponseV1, error)
	//Get skill by id
	DescribeSkillV1(context.Context, *DescribeSkillRequestV1) (*DescribeSkillResponseV1, error)
	//Remove skill by id
	RemoveSkillV1(context.Context, *RemoveSkillRequestV1) (*RemoveSkillResponseV1, error)
	//Update skill
	UpdateSkillV1(context.Context, *UpdateSkillRequestV1) (*UpdateSkillResponseV1, error)
	//Add multi skills
	MultiCreateSkillsV1(context.Context, *MultiCreateSkillRequestV1) (*MultiCreateSkillResponseV1, error)
	mustEmbedUnimplementedOcpSkillApiServer()
}

// UnimplementedOcpSkillApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpSkillApiServer struct {
}

func (UnimplementedOcpSkillApiServer) ListSkillsV1(context.Context, *ListSkillsRequestV1) (*ListSkillsResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSkillsV1 not implemented")
}
func (UnimplementedOcpSkillApiServer) CreateSkillV1(context.Context, *CreateSkillRequestV1) (*CreateSkillResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSkillV1 not implemented")
}
func (UnimplementedOcpSkillApiServer) DescribeSkillV1(context.Context, *DescribeSkillRequestV1) (*DescribeSkillResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeSkillV1 not implemented")
}
func (UnimplementedOcpSkillApiServer) RemoveSkillV1(context.Context, *RemoveSkillRequestV1) (*RemoveSkillResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSkillV1 not implemented")
}
func (UnimplementedOcpSkillApiServer) UpdateSkillV1(context.Context, *UpdateSkillRequestV1) (*UpdateSkillResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSkillV1 not implemented")
}
func (UnimplementedOcpSkillApiServer) MultiCreateSkillsV1(context.Context, *MultiCreateSkillRequestV1) (*MultiCreateSkillResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiCreateSkillsV1 not implemented")
}
func (UnimplementedOcpSkillApiServer) mustEmbedUnimplementedOcpSkillApiServer() {}

// UnsafeOcpSkillApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpSkillApiServer will
// result in compilation errors.
type UnsafeOcpSkillApiServer interface {
	mustEmbedUnimplementedOcpSkillApiServer()
}

func RegisterOcpSkillApiServer(s grpc.ServiceRegistrar, srv OcpSkillApiServer) {
	s.RegisterService(&OcpSkillApi_ServiceDesc, srv)
}

func _OcpSkillApi_ListSkillsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSkillsRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpSkillApiServer).ListSkillsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.skill.api.OcpSkillApi/ListSkillsV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpSkillApiServer).ListSkillsV1(ctx, req.(*ListSkillsRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpSkillApi_CreateSkillV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSkillRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpSkillApiServer).CreateSkillV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.skill.api.OcpSkillApi/CreateSkillV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpSkillApiServer).CreateSkillV1(ctx, req.(*CreateSkillRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpSkillApi_DescribeSkillV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeSkillRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpSkillApiServer).DescribeSkillV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.skill.api.OcpSkillApi/DescribeSkillV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpSkillApiServer).DescribeSkillV1(ctx, req.(*DescribeSkillRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpSkillApi_RemoveSkillV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSkillRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpSkillApiServer).RemoveSkillV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.skill.api.OcpSkillApi/RemoveSkillV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpSkillApiServer).RemoveSkillV1(ctx, req.(*RemoveSkillRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpSkillApi_UpdateSkillV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSkillRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpSkillApiServer).UpdateSkillV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.skill.api.OcpSkillApi/UpdateSkillV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpSkillApiServer).UpdateSkillV1(ctx, req.(*UpdateSkillRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpSkillApi_MultiCreateSkillsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiCreateSkillRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpSkillApiServer).MultiCreateSkillsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.skill.api.OcpSkillApi/MultiCreateSkillsV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpSkillApiServer).MultiCreateSkillsV1(ctx, req.(*MultiCreateSkillRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpSkillApi_ServiceDesc is the grpc.ServiceDesc for OcpSkillApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpSkillApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.skill.api.OcpSkillApi",
	HandlerType: (*OcpSkillApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSkillsV1",
			Handler:    _OcpSkillApi_ListSkillsV1_Handler,
		},
		{
			MethodName: "CreateSkillV1",
			Handler:    _OcpSkillApi_CreateSkillV1_Handler,
		},
		{
			MethodName: "DescribeSkillV1",
			Handler:    _OcpSkillApi_DescribeSkillV1_Handler,
		},
		{
			MethodName: "RemoveSkillV1",
			Handler:    _OcpSkillApi_RemoveSkillV1_Handler,
		},
		{
			MethodName: "UpdateSkillV1",
			Handler:    _OcpSkillApi_UpdateSkillV1_Handler,
		},
		{
			MethodName: "MultiCreateSkillsV1",
			Handler:    _OcpSkillApi_MultiCreateSkillsV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ocp-skill-api/ocp-skill-api.proto",
}
